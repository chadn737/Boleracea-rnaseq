setwd("projects/The-molecular-basis-of-kale-domestication-Comparative-transcriptomics/figures_tables/")
BiocManager::install(pheatmap)
BiocManager::install("topGO")
install.packages("Cairo")
library(Cairo)
install.packages(complexHeatmap)
BiocManager::install("clusterProfilers")
BiocManager::install("clusterProfiler")
BiocManager::install("flextable")
BiocManager::install("VennDiagram")
BiocManager::install("pheatmap")
setwd("../../zebularine/figures_tables")
#Import user-defined functions
source("../scripts/analyses_R/functions.R")
#Run DESeq2 analysis
#Load Deseq2
library(DESeq2)
#Read in sample table
sampleTable <- read.csv("../misc/deseq2_samples.csv",header=T)
#Read in counts table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter data (optional)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate size factors
dds <- estimateSizeFactors(dds)
#Estimate dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
path <- "Diagnostics/"
if(!dir.exists(path)){
dir.create(path)
}
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
cairo_pdf(paste(path,"Sample_Comparison_Heat_Map.pdf",sep=""),width=6,height=6,
family="Arial")
#sampleHeatMap is a user-defined function
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
cairo_pdf(paste(path,"Sample_Comparison_PCA.pdf",sep=""),width=6,height=6,
family="Arial")
#pcaPlot is a user-defined function
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
dev.off()
#DEGs
#Make directory for DEG analyses
path <- "DEGs/"
if(!dir.exists(path)){
dir.create(path)
}
#Make results tables for each pairwise comparison
#makeResultsTable is a user-defined function
resKvT <- makeResultsTable(dds,"Kale","TO1000",lfcThreshold=0,filter=F)
resKvC <- makeResultsTable(dds,"Kale","Cabbage",lfcThreshold=0,filter=F)
resCvT <- makeResultsTable(dds,"Cabbage","TO1000",lfcThreshold=0,filter=F)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
#This is necessary because the adjusted p-value is only for the
#individual pairwise comparisons
resfull$padj <- p.adjust(resfull$pval,method="BH")
#Import user-defined functions
source("../scripts/analyses_R/functions.R")
#Run DESeq2 analysis
#Load Deseq2
library(DESeq2)
#Read in sample table
sampleTable <- read.csv("../misc/deseq2_samples.csv",header=T)
#Read in counts table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter data (optional)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate size factors
dds <- estimateSizeFactors(dds)
#Estimate dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
path <- "Diagnostics/"
if(!dir.exists(path)){
dir.create(path)
}
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
cairo_pdf(paste(path,"Sample_Comparison_Heat_Map.pdf",sep=""),width=6,height=6,
family="Arial")
#sampleHeatMap is a user-defined function
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
cairo_pdf(paste(path,"Sample_Comparison_PCA.pdf",sep=""),width=6,height=6,
family="Arial")
#pcaPlot is a user-defined function
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
dev.off()
#DEGs
#Make directory for DEG analyses
path <- "DEGs/"
if(!dir.exists(path)){
dir.create(path)
}
#Make results tables for each pairwise comparison
#makeResultsTable is a user-defined function
resKvT <- makeResultsTable(dds,"Kale","TO1000",lfcThreshold=0,filter=F)
resKvC <- makeResultsTable(dds,"Kale","Cabbage",lfcThreshold=0,filter=F)
resCvT <- makeResultsTable(dds,"Cabbage","TO1000",lfcThreshold=0,filter=F)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
#This is necessary because the adjusted p-value is only for the
#individual pairwise comparisons
resfull$padj <- p.adjust(resfull$pval,method="BH")
#Import user-defined functions
source("../scripts/analyses_R/functions.R")
#Run DESeq2 analysis
#Load Deseq2
library(DESeq2)
#Read in sample table
sampleTable <- read.csv("../misc/deseq2_samples.csv",header=T)
#Read in counts table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter data (optional)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate size factors
dds <- estimateSizeFactors(dds)
#Estimate dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
path <- "Diagnostics/"
if(!dir.exists(path)){
dir.create(path)
}
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
cairo_pdf(paste(path,"Sample_Comparison_Heat_Map.pdf",sep=""),width=6,height=6,
family="Arial")
#sampleHeatMap is a user-defined function
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
cairo_pdf(paste(path,"Sample_Comparison_PCA.pdf",sep=""),width=6,height=6,
family="Arial")
#pcaPlot is a user-defined function
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
dev.off()
#DEGs
#Make directory for DEG analyses
path <- "DEGs/"
if(!dir.exists(path)){
dir.create(path)
}
#Make results tables for each pairwise comparison
#makeResultsTable is a user-defined function
resKvT <- makeResultsTable(dds,"Kale","TO1000",lfcThreshold=0,filter=F)
resKvC <- makeResultsTable(dds,"Kale","Cabbage",lfcThreshold=0,filter=F)
resCvT <- makeResultsTable(dds,"Cabbage","TO1000",lfcThreshold=0,filter=F)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
#This is necessary because the adjusted p-value is only for the
#individual pairwise comparisons
resfull$padj <- p.adjust(resfull$pval,method="BH")
ls
res <- makeResultsTable(dds,"WTH","WCA",lfcThreshold=0,filter=F)
head(res)
sig <- res[res$padj < 0.05,]
sig
sig <- na.omit(res[res$padj < 0.05,])
sig
sig
sig
#Import user-defined functions
source("../scripts/analyses_R/functions.R")
#Run DESeq2 analysis
#Load Deseq2
library(DESeq2)
#Read in sample table
sampleTable <- read.csv("../misc/deseq2_samples.csv",header=T)
#Read in counts table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter data (optional)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate size factors
dds <- estimateSizeFactors(dds)
#Estimate dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
path <- "Diagnostics/"
if(!dir.exists(path)){
dir.create(path)
}
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
cairo_pdf(paste(path,"Sample_Comparison_Heat_Map.pdf",sep=""),width=6,height=6,
family="Arial")
#sampleHeatMap is a user-defined function
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
cairo_pdf(paste(path,"Sample_Comparison_PCA.pdf",sep=""),width=6,height=6,
family="Arial")
#pcaPlot is a user-defined function
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
dev.off()
#DEGs
#Make directory for DEG analyses
path <- "DEGs/"
if(!dir.exists(path)){
dir.create(path)
}
#Make results tables for each pairwise comparison
#makeResultsTable is a user-defined function
resKvT <- makeResultsTable(dds,"Kale","TO1000",lfcThreshold=0,filter=F)
resKvC <- makeResultsTable(dds,"Kale","Cabbage",lfcThreshold=0,filter=F)
resCvT <- makeResultsTable(dds,"Cabbage","TO1000",lfcThreshold=0,filter=F)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
#This is necessary because the adjusted p-value is only for the
#individual pairwise comparisons
resfull$padj <- p.adjust(resfull$pval,method="BH")
res <- makeResultsTable(dds,"WTH","WCA",lfcThreshold=0,filter=F)
sig <- na.omit(res[res$padj < 0.05,])
sig
rm(list=ls())
ls()
setwd("../../The-molecular-basis-of-kale-domestication-Comparative-transcriptomics/figures_tables/")
source("../scripts/deg.R")
cairo_pdf(paste(path,"Sample_Comparison_PCA.pdf",sep=""),width=6,height=6,
family="Arial")
#pcaPlot is a user-defined function
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
dev.off()
ppcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))a
pcaPlot(rld)
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
cairo_pdf(paste(path,"Sample_Comparison_PCA.pdf",sep=""),width=6,height=6,
family="Arial")
#pcaPlot is a user-defined function
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
dev.off()
pcaPlot(rld) + guides(color=guide_legend(title="Genotype"))
source("../scripts/deg.R")
nrow(KsharedUp)
nrow(KsharedDown)
head(KsharedUp)
source("../scripts/ReviGO.R")
BiocManager::install(treemap)
BiocManager::install("treemap")
source("../scripts/ReviGO.R")
source("../scripts/ReviGO.R")
Make diagnostic figures of samples
path <- "Diagnostics/"
if(!dir.exists(path)){
dir.create(path)
}
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
cairo_pdf(paste(path,"Sample_Comparison_Heat_Map.pdf",sep=""),width=6,height=6,
family="Arial")
#sampleHeatMap is a user-defined function
sampleHeatMap(rld)
dev.off()
fisher.test(as.matrix(synDEG[c(2:3),]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(4:5),]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(6:7),]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(2:3),c(2,1)]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(4:5),c(2,1)]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(6:7),c(2,1)]),alternative="two.sided")
synDEG
fisher.test(as.matrix(synDEG[c(2:3),]),alternative="two.sided")
synDEG[c(2:3),]
fisher.test(as.matrix(synDEG[c(2:3),]),alternative="two.sided")$pvalue
fisher.test(as.matrix(synDEG[c(4:5),]),alternative="two.sided")$pvalue
fisher.test(as.matrix(synDEG[c(6:7),]),alternative="two.sided")$pvalue
fisher.test(as.matrix(synDEG[c(2:3),c(2,1)]),alternative="two.sided")$pvalue
fisher.test(as.matrix(synDEG[c(4:5),c(2,1)]),alternative="two.sided")$pvalue
fisher.test(as.matrix(synDEG[c(6:7),c(2,1)]),alternative="two.sided")$pvalue
fisher.test(as.matrix(synDEG[c(2:3),]),alternative="two.sided")$p.value
fisher.test(as.matrix(synDEG[c(4:5),]),alternative="two.sided")$p.value
fisher.test(as.matrix(synDEG[c(6:7),]),alternative="two.sided")$p.value
fisher.test(as.matrix(synDEG[c(2:3),c(2,1)]),alternative="two.sided")$p.value
fisher.test(as.matrix(synDEG[c(4:5),c(2,1)]),alternative="two.sided")$p.value
fisher.test(as.matrix(synDEG[c(6:7),c(2,1)]),alternative="two.sided")$p.value
df(p.value=c(0.6822318,2.56211e-09,3.064052e-12,0.6822318,2.56211e-09,3.064052e-12))
tmp<-data.frame(p.value=c(0.6822318,2.56211e-09,3.064052e-12,0.6822318,2.56211e-09,3.064052e-12))
tmp$padj <- p.adjust(tmp$p.value)
tmp
FEsubDEG
subDEG[c(4:5),c(1,2)]
subDEG[c(6:7),c(1,2)]
subDEG[c(2:3),c(1,2)]
as.matrix(subDEG[c(4:5),c(1,2)]
subDEG[c(4:5),c(1,2)]
subDEG[c(6:7),c(1,2)]
subDEG[c(2:3),c(3,4)]
subDEG[c(4:5),c(3,4)]
FEsubDEG <- data.frame(
row.names=c("Kale vs TO1000 LF","Kale vs TO1000 MF1","Kale vs TO1000 MF2",
"Kale vs Cabbage LF","Kale vs Cabbage MF1","Kale vs Cabbage MF2",
"Cabbage vs TO1000 LF","Cabbage vs TO1000 MF1","Cabbage vs TO1000 MF2"),
OR=c(fisher.test(as.matrix(subDEG[c(2:3),c(1,2)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(2:3),c(3,4)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(2:3),c(5,6)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(4:5),c(1,2)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(4:5),c(3,4)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(4:5),c(5,6)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(6:7),c(1,2)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(6:7),c(3,4)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(6:7),c(5,6)]),alternative="two.sided")$estimate),
pvalue=c(fisher.test(as.matrix(subDEG[c(2:3),c(1,2)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(2:3),c(3,4)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(2:3),c(5,6)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(4:5),c(1,2)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(4:5),c(3,4)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(4:5),c(5,6)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(6:7),c(1,2)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(6:7),c(3,4)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(6:7),c(5,6)]),alternative="two.sided")$p.value)
)
FEsubDEG
