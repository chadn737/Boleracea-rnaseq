write.csv(KsharedAnnot_kale_only[c("Gene","Description","BLAST_hit")],
paste(path,"Kale_shared_kale_only_Annotations.csv",sep=""),quote=FALSE,row.names=FALSE)
KsharedAnnot_CvT <- KsharedAnnot[KsharedAnnot$Gene %in% Kshared[Kshared$CvT == 1,]$id,]
write.csv(KsharedAnnot_CvT[c("Gene","Description","BLAST_hit")],
paste(path,"Kale_shared_and_CvT_DEG_Annotations.csv",sep=""),quote=FALSE,row.names=FALSE)
#Identify shared genes with increased or decreased expression, map these to
#the descriptive annotations, and output as csv files
KsharedUpAnnot <- merge(KsharedUp,BoAnnot)
write.csv(KsharedUpAnnot[c("Gene","Description","BLAST_hit")],
paste(path,"Kale_shared_Up_Annotations.tsv",sep=""),quote=FALSE,row.names=FALSE)
KsharedDownAnnot <- merge(KsharedDown,BoAnnot)
write.csv(KsharedDownAnnot[c("Gene","Description","BLAST_hit")],
paste(path,"Kale_shared_Down_Annotations.csv",sep=""),quote=FALSE,row.names=FALSE)
#Compare Syntenic vs Non-Syntenic Genes between B. oleracea and Arabidopsis for
#enrichment in DEGs
#Read in data and format tables
syn <- read.table("../misc/Bo_At_syntelogs.csv",header=T,sep="\t")
synRes <- merge(resfull,syn,by.x="id",by.y="Bo_gene")
synSig <- merge(sig,syn,by.x="id",by.y="Bo_gene")
#Create a table of percentage of DEG & Non-DEG Syntenic & Non-Syntenic Genes
pSyn=data.frame(
row.names=c("Syntenic: Genome","Syntenic: KvT DEGs","Syntenic: KvC DEGs",
"Syntenic: CvT DEGs","Non-Syntenic: Genome","Non-Syntenic: KvT DEGs",
"Non-Syntenic: KvC DEGs","Non-Syntenic: CvT DEGs"),
percent=c(length(syn$Bo_gene %in% geneEx$Gene)/59225,
nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Kale" & sig$sampleB=="TO1000",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",]),
nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",]),
nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])/
nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",]),
(59225-length(syn$Bo_gene %in% geneEx$Gene))/59225,
nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Kale" & sig$sampleB=="TO1000",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",]),
nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",]),
nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])/
nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])),
order=c(1,2,3,4,5,6,7,8))
#Create contingency table of DEG & Non-DEG numbers
synDEG <- data.frame(
row.names=c("Genome","KvT DEG","KvT Non-DEG",
"KvC DEG","KvC Non-DEG","CvT DEG","CvT Non-DEG"),
syntenic=c(nrow(syn),
nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Kale" & sig$sampleB=="TO1000",]),
nrow(syn)-nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Kale" & sig$sampleB=="TO1000",]),
nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Kale" & sig$sampleB=="Cabbage",]),
nrow(syn)-nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Kale" & sig$sampleB=="Cabbage",]),
nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",]),
nrow(syn)-nrow(sig[sig$id %in% syn$Bo_gene & sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])),
nonsyntenic=c(59225-nrow(syn),
nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Kale" & sig$sampleB=="TO1000",]),
(59225-nrow(syn))-nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Kale" & sig$sampleB=="TO1000",]),
nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Kale" & sig$sampleB=="Cabbage",]),
(59225-nrow(syn))-nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Kale" & sig$sampleB=="Cabbage",]),
nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",]),
(59225-nrow(syn))-nrow(sig[!(sig$id %in% syn$Bo_gene) & sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",]))
)
#Use Fisher's Exact Test to test for differences between syntenic & non-syntenic genes
fisher.test(as.matrix(synDEG[c(2:3),]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(4:5),]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(6:7),]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(2:3),c(2,1)]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(4:5),c(2,1)]),alternative="two.sided")
fisher.test(as.matrix(synDEG[c(6:7),c(2,1)]),alternative="two.sided")
#Make Plot
ggsave(paste(path,"Syntenic_genes.pdf",sep=""),
ggplot(pSyn) +
geom_bar(aes(x=reorder(row.names(pSyn),order),
y=percent,fill=reorder(row.names(pSyn),order)),stat="identity") +
theme(panel.background=element_blank(),
axis.line=element_line(color="black"),
axis.text=element_text(size=12,color="black"),
axis.title=element_text(size=18,color="black",face="bold"),
axis.text.x=element_text(angle=270,hjust=0,vjust=0.5),
plot.title = element_text(size=18,hjust = 0.5,color="black",face="bold"),
legend.position="none") +
scale_y_continuous(expand=c(0,0),limits=c(0,0.7),labels=percent) +
scale_fill_manual(values=c("tomato2","dodgerblue3","palegreen4","khaki3",
"tomato2","dodgerblue3","palegreen4","khaki3")) +
ylab("Percentage of Genes") +
xlab("") + ggtitle("Genes Syntenic to Arabidopsis")
)
#Create a contingency table for DEGs for each subgenome
subDEG <- data.frame(row.names=c("Genome","KvT DEG","KvT Non-DEG","KvC DEG",
"KvC Non-DEG","CvT DEG","CvT Non-DEG"),
LF=c(nrow(syn[syn$subgenome=="LF",]),
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",]),
nrow(syn[syn$subgenome=="LF",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",]),
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="LF",]),
nrow(syn[syn$subgenome=="LF",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="LF",]),
nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",]),
nrow(syn[syn$subgenome=="LF",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",])),
nonLF=c(59225-nrow(syn[syn$subgenome=="LF",]),
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",]),
(59225-nrow(syn[syn$subgenome=="LF",]))-(nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",])),
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="LF",]),
(59225-nrow(syn[syn$subgenome=="LF",]))-(nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="LF",])),
nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",]),
(59225-nrow(syn[syn$subgenome=="LF",]))-(nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",]))),
MF1=c(nrow(syn[syn$subgenome=="MF1",]),
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",]),
nrow(syn[syn$subgenome=="MF1",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",]),
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF1",]),
nrow(syn[syn$subgenome=="MF1",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF1",]),
nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",]),
nrow(syn[syn$subgenome=="MF1",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",])),
nonMF1=c(59225-nrow(syn[syn$subgenome=="MF1",]),
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",]),
(59225-nrow(syn[syn$subgenome=="MF1",]))-(nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",])),
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF1",]),
(59225-nrow(syn[syn$subgenome=="MF1",]))-(nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF1",])),
nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",]),
(59225-nrow(syn[syn$subgenome=="MF1",]))-(nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",]))),
MF2=c(nrow(syn[syn$subgenome=="MF2",]),
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",]),
nrow(syn[syn$subgenome=="MF2",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",]),
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF2",]),
nrow(syn[syn$subgenome=="MF2",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF2",]),
nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",]),
nrow(syn[syn$subgenome=="MF2",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",])),
nonMF2=c(59225-nrow(syn[syn$subgenome=="MF2",]),
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",]),
(59225-nrow(syn[syn$subgenome=="MF2",]))-(nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",])),
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF2",]),
(59225-nrow(syn[syn$subgenome=="MF2",]))-(nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])-nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF2",])),
nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",]),
(59225-nrow(syn[syn$subgenome=="MF2",]))-(nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])-nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",])))
)
#Perform Fisher's Exact Test on subgenomes
FEsubDEG <- data.frame(
row.names=c("Kale vs TO1000 LF","Kale vs TO1000 MF1","Kale vs TO1000 MF2",
"Kale vs Cabbage LF","Kale vs Cabbage MF1","Kale vs Cabbage MF2",
"Cabbage vs TO1000 LF","Cabbage vs TO1000 MF1","Cabbage vs TO1000 MF2"),
OR=c(fisher.test(as.matrix(subDEG[c(2:3),c(1,2)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(4:5),c(1,2)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(6:7),c(1,2)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(2:3),c(3,4)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(4:5),c(3,4)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(6:7),c(3,4)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(2:3),c(5,6)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(4:5),c(5,6)]),alternative="two.sided")$estimate,
fisher.test(as.matrix(subDEG[c(6:7),c(5,6)]),alternative="two.sided")$estimate),
pvalue=c(fisher.test(as.matrix(subDEG[c(2:3),c(1,2)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(4:5),c(1,2)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(6:7),c(1,2)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(2:3),c(3,4)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(4:5),c(3,4)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(6:7),c(3,4)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(2:3),c(5,6)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(4:5),c(5,6)]),alternative="two.sided")$p.value,
fisher.test(as.matrix(subDEG[c(6:7),c(5,6)]),alternative="two.sided")$p.value)
)
FEsubDEG$p.adjust <- p.adjust(FEsubDEG$pvalue,method="BH")
#FEsubDEGFT <- flextable(FEsubDEG)
#FEsubDEGFT <- autofit(FEsubDEG)
#FEsubDEGFT <- align(FEsubDEG,align="center",part="all")
#FEsubDEGFT <- add_header_lines(mapStatsFT,
#  values=("Supplementary Table 1: Mapping Statistics"))
#FEsubDEGFT <- bold(mapStatsFT,part="header")
#FEsubDEGFT <- bold(mapStatsFT,j="Sample")
#FEsubDEGFT <- font(mapStatsFT,fontname="Arial")
#FEsubDEGFT <- fontsize(mapStatsFT,size=12,part="all")
#save_as_docx(mapStatsFT,path=paste(path,"Supplementary_Table_1.docx",sep=""))
#KvT subgenome
KvTsub=data.frame(
row.names=c("LF Genome","LF DEGs","MF1 Genome","MF1 DEGs","MF2 Genome","MF2 DEGs"),
percent=c(nrow(syn[syn$subgenome=="LF",])/59225,
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",]),
nrow(syn[syn$subgenome=="MF1",])/59225,
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",]),
nrow(syn[syn$subgenome=="MF2",])/59225,
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="TO1000",])),
order=c(1,2,3,4,5,6))
#Make Plot
ggsave(paste(path,"KvT_subgenome.pdf",sep=""),
ggplot(KvTsub) +
geom_bar(aes(x=reorder(row.names(KvTsub),order),
y=percent,fill=reorder(row.names(KvTsub),order)),
stat="identity") +
theme(panel.background=element_blank(),
axis.line=element_line(color="black"),
axis.text=element_text(size=12,color="black"),
axis.title=element_text(size=18,color="black",face="bold"),
axis.text.x=element_text(angle=270,hjust=0,vjust=0.5),
plot.title = element_text(size=18,hjust = 0.5,color="black",face="bold"),
legend.position="none") +
scale_y_continuous(expand=c(0,0),limits=c(0,0.23),labels=percent) +
scale_fill_manual(values=c("tomato2","tomato2","dodgerblue3",
"dodgerblue3","black","black")) +
ylab("Percentage of Genes") +
xlab("") + ggtitle("Kale vs T01000 Subgenomes")
)
#KvC subgenome
KvCsub=data.frame(
row.names=c("LF Genome","LF DEGs","MF1 Genome","MF1 DEGs","MF2 Genome","MF2 DEGs"),
percent=c(nrow(syn[syn$subgenome=="LF",])/59225,
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="LF",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",]),
nrow(syn[syn$subgenome=="MF1",])/59225,
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF1",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",]),
nrow(syn[syn$subgenome=="MF2",])/59225,
nrow(synSig[synSig$sampleA=="Kale" & synSig$sampleB=="Cabbage" & synSig$subgenome=="MF2",])/
nrow(sig[sig$sampleA=="Kale" & sig$sampleB=="Cabbage",])),
order=c(1,2,3,4,5,6))
#Make Plot
ggsave(paste(path,"KvC_subgenome.pdf",sep=""),
ggplot(KvCsub) +
geom_bar(aes(x=reorder(row.names(KvCsub),order),
y=percent,fill=reorder(row.names(KvCsub),order)),
stat="identity") +
theme(panel.background=element_blank(),
axis.line=element_line(color="black"),
axis.text=element_text(size=12,color="black"),
axis.title=element_text(size=18,color="black",face="bold"),
axis.text.x=element_text(angle=270,hjust=0,vjust=0.5),
plot.title = element_text(size=18,hjust = 0.5,color="black",face="bold"),
legend.position="none") +
scale_y_continuous(expand=c(0,0),limits=c(0,0.23),labels=percent) +
scale_fill_manual(values=c("tomato2","tomato2","dodgerblue3",
"dodgerblue3","black","black")) +
ylab("Percentage of Genes") +
xlab("") + ggtitle("Kale vs Cabbage Subgenomes")
)
#CvT subgenome
CvTsub=data.frame(
row.names=c("LF Genome","LF DEGs","MF1 Genome","MF1 DEGs","MF2 Genome","MF2 DEGs"),
percent=c(nrow(syn[syn$subgenome=="LF",])/59225,
nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="LF",])/
nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",]),
nrow(syn[syn$subgenome=="MF1",])/59225,
nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF1",])/
nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",]),
nrow(syn[syn$subgenome=="MF2",])/59225,
nrow(synSig[synSig$sampleA=="Cabbage" & synSig$sampleB=="TO1000" & synSig$subgenome=="MF2",])/
nrow(sig[sig$sampleA=="Cabbage" & sig$sampleB=="TO1000",])),
order=c(1,2,3,4,5,6))
#Make Plot
ggsave(paste(path,"CvT_subgenome.pdf",sep=""),
ggplot(CvTsub) +
geom_bar(aes(x=reorder(row.names(CvTsub),order),
y=percent,fill=reorder(row.names(CvTsub),order)),
stat="identity") +
theme(panel.background=element_blank(),
axis.line=element_line(color="black"),
axis.text=element_text(size=12,color="black"),
axis.title=element_text(size=18,color="black",face="bold"),
axis.text.x=element_text(angle=270,hjust=0,vjust=0.5),
plot.title = element_text(size=18,hjust = 0.5,color="black",face="bold"),
legend.position="none") +
scale_y_continuous(expand=c(0,0),limits=c(0,0.23),labels=percent) +
scale_fill_manual(values=c("tomato2","tomato2","dodgerblue3",
"dodgerblue3","black","black")) +
ylab("Percentage of Genes") +
xlab("") + ggtitle("Cabbage vs T01000 Subgenomes")
)
##GO term enrichment using topGO
#Create output directory
path <- "GO_terms/"
if(!dir.exists(path)){
dir.create(path)
}
#Load libraries
library(topGO)
library(GO.db)
#Read in gene to GO term mapping in topGO format
goTerms <- readMappings(file="../misc/topGO.txt")
#Analyze GO terms for increased expression genes in Kale vs TO1000
#Format input table, selecting only genes with increasing expression
KvTgotermUP <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC > 1,]$id))
names(KvTgotermUP) <- resKvT$id
#Perform GO term enrichment
#topGO is a user defined function
#It combines multiple steps for each category of GO term and outputs a formatted table
#Here I am restricting analysis to only GO terms with ...
#at least 5 genes mapping to that to that term in the entire gene list
KvTgotermUP <- topGO(KvTgotermUP,goTerms,nodeSize=5,fdr=0.05,filename="KvT_up",
path=path,writeData=TRUE)
#Analyze GO term enrichment for decreased expression genes in Kale vs TO1000
KvTgotermDOWN <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC < -1,]$id))
names(KvTgotermDOWN) <- resKvT$id
KvTgotermDOWN <- topGO(KvTgotermDOWN,goTerms,nodeSize=5,fdr=0.05,filename="KvT_down",
path=path,writeData=TRUE)
#Analyze GO terms for increased expression genes in Kale vs Cabbage
KvCgotermUP <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC > 1,]$id))
names(KvCgotermUP) <- resKvC$id
KvCgotermUP <- topGO(KvCgotermUP,goTerms,nodeSize=5,fdr=0.05,filename="KvC_up",
path=path,writeData=TRUE)
#Analyze GO term enrichment for decreased expression genes in Kale vs Cabbage
KvCgotermDOWN <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC < -1,]$id))
names(KvCgotermDOWN) <- resKvC$id
KvCgotermDOWN <- topGO(KvCgotermDOWN,goTerms,nodeSize=5,fdr=0.05,filename="KvC_down",
path=path,writeData=TRUE)
#Analyze GO terms for increased expression genes in Cabbage vs TO1000
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,fdr=0.05,filename="CvT_up",
path=path,writeData=TRUE)
#Analyze GO term enrichment for decreased expression genes in Cabbage vs TO1000
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,fdr=0.05,filename="CvT_down",
path=path,writeData=TRUE)
#Analyze GO terms for increased expression genes in Kale shared
KsharedGOtermUP <- factor(as.integer(geneEx$Gene %in% KsharedUp$Gene))
names(KsharedGOtermUP) <- geneEx$Gene
KsharedGOtermUP <- topGO(KsharedGOtermUP,goTerms,nodeSize=5,fdr=0.05,
filename="Kale_shared_up",path=path,writeData=TRUE)
#Analyze GO term enrichment for decreased expression genes in Kale shared
KsharedGOtermDOWN <- factor(as.integer(geneEx$Gene %in% KsharedDown$Gene))
names(KsharedGOtermDOWN) <- geneEx$Gene
KsharedGOtermDOWN <- topGO(KsharedGOtermDOWN,goTerms,nodeSize=5,fdr=0.05,
filename="Kale_shared_down",path=path,writeData=TRUE)
#KEGG analysis
#Check if directory "kegg" exists and if not create it
path <- "Kegg/"
if(!dir.exists(path)){
dir.create(path)
}
#Read in mappings to Bo ncbi gene names
#These are the ones supported by KEGG for B. oleracea
ncbi <- read.csv("../misc/Bo2ncbi.csv",header=TRUE)
#Merge those mappings with Kale vs TO1000 results
KvTncbi <- merge(ncbi,resKvT,by.x="Boleracea_gene",by.y="id")
#Separate those results into genes with increased & decreased expresion
KvTncbiSigUp <- na.omit(KvTncbi[KvTncbi$padj < 0.05 & KvTncbi$log2FC >= 1,])
KvTncbiSigDown <- na.omit(KvTncbi[KvTncbi$padj < 0.05 & KvTncbi$log2FC <= -1,])
#Merge those mappings with Kale vs Cabbage results
KvCncbi <- merge(ncbi,resKvC,by.x="Boleracea_gene",by.y="id")
#Separate those results into genes with increased & decreased expresion
KvCncbiSigUp <- na.omit(KvCncbi[KvCncbi$padj < 0.05 & KvCncbi$log2FC >= 1,])
KvCncbiSigDown <- na.omit(KvCncbi[KvCncbi$padj < 0.05 & KvCncbi$log2FC <= -1,])
#Merge those mappings with Cabbage vs TO1000 results
CvTncbi <- merge(ncbi,resCvT,by.x="Boleracea_gene",by.y="id")
#Separate those results into genes with increased & decreased expresion
CvTncbiSigUp <- na.omit(CvTncbi[CvTncbi$padj < 0.05 & CvTncbi$log2FC >= 1,])
CvTncbiSigDown <- na.omit(CvTncbi[CvTncbi$padj < 0.05 & CvTncbi$log2FC <= -1,])
#Merge those mappings with Kale shared results for increased/decreased expression
KncbiSharedUp <- merge(ncbi,KsharedUp,by.x="Boleracea_gene",by.y="Gene")
KncbiSharedDown <- merge(ncbi,KsharedDown,by.x="Boleracea_gene",by.y="Gene")
#Use the package clusterProfiler to do KEGG enrichment
library(clusterProfiler)
#Perform enrichment test for Kale vs TO1000 genes with increased expression
#and export the results to table
KvTupKEGG <- enrichKEGG(KvTncbiSigUp$NCBI_gene, organism="boe")@result
write.table(KvTupKEGG[KvTupKEGG$p.adjust < 0.05,],
paste(path,"KvT_up.csv",sep=""),sep=",",quote=FALSE,row.names=FALSE)
#Perform enrichment test for Kale vs TO1000 genes with decreased expression
#and export the results to table
KvTdownKEGG <- enrichKEGG(KvTncbiSigDown$NCBI_gene, organism="boe")@result
write.table(KvTdownKEGG[KvTdownKEGG$p.adjust < 0.05,],
paste(path,"KvT_down.csv",sep=""),sep=",",quote=FALSE,row.names=FALSE)
#Perform enrichment test for Kale vs Cabbage genes with increased expression
#and export the results to table
KvCupKEGG <- enrichKEGG(KvCncbiSigUp$NCBI_gene, organism="boe")@result
write.table(KvCupKEGG[KvCupKEGG$p.adjust < 0.05,],
paste(path,"KvC_up.csv",sep=""),sep=",",quote=FALSE,row.names=FALSE)
#Perform enrichment test for Kale vs Cabbage genes with decreased expression
#and export the results to table
KvCdownKEGG <- enrichKEGG(KvCncbiSigDown$NCBI_gene, organism="boe")@result
write.table(KvCdownKEGG[KvCdownKEGG$p.adjust < 0.05,],
paste(path,"KvC_down.csv",sep=""),sep=",",quote=FALSE,row.names=FALSE)
#Perform enrichment test for Cabbage vs TO1000 genes with increased expression
#and export the results to table
CvTupKEGG <- enrichKEGG(CvTncbiSigUp$NCBI_gene, organism="boe")@result
write.table(CvTupKEGG[CvTupKEGG$p.adjust < 0.05,],
paste(path,"CvT_up.csv",sep=""),sep=",",quote=FALSE,row.names=FALSE)
#Perform enrichment test for Cabbage vs TO1000 genes with decreased expression
#and export the results to table
CvTdownKEGG <- enrichKEGG(CvTncbiSigDown$NCBI_gene, organism="boe")@result
write.table(CvTdownKEGG[CvTdownKEGG$p.adjust < 0.05,],
paste(path,"CvT_down.csv",sep=""),sep=",",quote=FALSE,row.names=FALSE)
#Perform enrichment test for Kale shared genes with increased expression
#and export the results to table
KsharedUpKEGG <- enrichKEGG(KncbiSharedUp$NCBI_gene, organism="boe")@result
write.table(KsharedUpKEGG[KsharedUpKEGG$p.adjust < 0.05,],
paste(path,"Kale_shared_up.csv",sep=""),sep=",",quote=FALSE,row.names=FALSE)
#Perform enrichment test for Kale shared genes with decreased expression
#and export the results to table
KsharedDownKEGG <- enrichKEGG(KncbiSharedDown$NCBI_gene, organism="boe")@result
write.table(KsharedDownKEGG[KsharedDownKEGG$p.adjust < 0.05,],
paste(path,"Kale_shared_down.csv",sep=""),sep=",",quote=FALSE,row.names=FALSE)
#Plot out data for specific genes of interest
#Create output directory
path <- "Genes_of_interest/"
if(!dir.exists(path)){
dir.create(path)
}
#Read in gene list
goi <- read.csv("../misc/genes_of_interest.csv",header=TRUE)
#Iterate over each gene in that list
for(gene in goi$Gene){
#Use "tryCatch" to handle errors
tryCatch({
#Make a table of that gene's data from deseq2 using the plotCounts function
x <- plotCounts(dds,gene,intgroup="condition",normalized=TRUE,transform=FALSE,
returnData=TRUE)
#Plot using ggplot2
p <- ggplot(x) +
geom_point(aes(x=condition,y= count,color=condition)) +
theme(panel.background=element_blank(),
axis.line=element_line(color="black"),
axis.text=element_text(color="black"),
axis.title=element_text(color="black",face="bold"),
legend.position="none") + xlab("Genotype")
#Save as a pdf
ggsave(paste(path,gene,"_counts.pdf",sep=""),p,width=5,height=4)
#How to handle potential errors
},error=function(e){})
}
#Plots for GOI of different functions
for(i in c('Development','Defense','Nutrition','Flowering')){
#Subset expression data
x <- geneEx[geneEx$Gene %in% goi[goi$Function==i & goi$Heatmap=='',]$Gene,]
#Merge expression data with goi info
x <- merge(x,goi[goi$Function==i & goi$Heatmap=='',],by.x='Gene',by.y='Gene')
#Set rownames to combination of B. oleracea gene ID & At homolog name
row.names(x) <- paste(x$Gene,': ',x$Name,sep="")
#Reorder the data frame based on log2 fold change from increasing to decreasing
x <- x[order(x$KvT_log2FC,decreasing=TRUE),]
#Lets make a heatmap
#Save as pdf
pdf(paste(path,i,'_heatmap.pdf',sep=''))
#Use pheatmap on log2 transformed data
#We add 0.01 to all the data to handle 0 values that otherwise get set to -Inf
pheatmap(log2(x[2:9]+0.01),
#Turn off clustering
cluster_rows=FALSE,cluster_cols=FALSE,
#Modify the sample labels
labels_col =gsub('_',' ',colnames(x[2:9])),)
dev.off()
}
#New Heatmaps
for(i in c('HM1','HM2')){
#Subset expression data
x <- geneEx[geneEx$Gene %in% goi[goi$Heatmap==i,]$Gene,]
#Merge expression data with goi info
x <- merge(x,goi[goi$Heatmap==i,],by.x='Gene',by.y='Gene')
#Set rownames to combination of B. oleracea gene ID & At homolog name
row.names(x) <- paste(x$Gene,': ',x$Name,sep="")
#Reorder the data frame based on log2 fold change from increasing to decreasing
x <- x[order(x$KvT_log2FC,decreasing=TRUE),]
#Lets make a heatmap
#Save as pdf
pdf(paste(path,i,'_heatmap.pdf',sep=''))
#Use pheatmap on log2 transformed data
#We add 0.01 to all the data to handle 0 values that otherwise get set to -Inf
pheatmap(log2(x[2:9]+0.01),
#Turn off clustering
cluster_rows=FALSE,cluster_cols=FALSE,
#Modify the sample labels
labels_col=gsub('_',' ',colnames(x[2:9])),)
dev.off()
}
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9])),)
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9])),gaps_row=c(15,16))
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9])),gaps_row=c(15))
x
log2(x[2:9]+0.01
x
x$KvT_log2FC
nrow(x[x$KvT_log2FC > 0,])
for(i in c('HM1','HM2')){
#Subset expression data
x <- geneEx[geneEx$Gene %in% goi[goi$Heatmap==i,]$Gene,]
#Merge expression data with goi info
x <- merge(x,goi[goi$Heatmap==i,],by.x='Gene',by.y='Gene')
#Set rownames to combination of B. oleracea gene ID & At homolog name
row.names(x) <- paste(x$Gene,': ',x$Name,sep="")
#Reorder the data frame based on log2 fold change from increasing to decreasing
x <- x[order(x$KvT_log2FC,decreasing=TRUE),]
#Get number of rows Kale is higher expressed, use this to set gap in heatmap
gap <- nrow(x[x$KvT_log2FC > 0,])
#Lets make a heatmap
#Save as pdf
pdf(paste(path,i,'_heatmap.pdf',sep=''))
#Use pheatmap on log2 transformed data
#We add 0.01 to all the data to handle 0 values that otherwise get set to -Inf
pheatmap(log2(x[2:9]+0.01),
#Turn off clustering
cluster_rows=FALSE,cluster_cols=FALSE,
#Modify the sample labels
labels_col=gsub('_',' ',colnames(x[2:9])),
gaps_row=c(gap))
dev.off()
}
pheatmap(log2(x[2:9]+0.01),
#Turn off clustering
cluster_rows=FALSE,cluster_cols=FALSE,
#Modify the sample labels
labels_col=gsub('_',' ',colnames(x[2:9])),
gaps_row=c(gap))
pheatmap(log2(x[2:9]+0.01),
#Turn off clustering
cluster_rows=FALSE,cluster_cols=FALSE,
#Modify the sample labels
labels_col=gsub('_',' ',colnames(x[2:9])),
gaps_row=c(gap),)
gap
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9])),gaps_row=c(gap),)
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9])),gaps_row=c(gap))
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9])),)
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9])),)\
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9])))
pheatmap(log2(x[2:9]+0.01),cluster_rows=FALSE,cluster_cols=FALSE,labels_col=gsub('_',' ',colnames(x[2:9]))
)
x
pheatmap(log2(x[2:9]+0.01))
