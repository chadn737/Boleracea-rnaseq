}
#Function for making combined dotplots of GOterms
GOdotplot2 <- function(x){
ggplot(x) +
geom_point(aes(x=c("CvT"),y=Term,size=CvT_sig,color=CvT_FDR)) +
geom_point(aes(x=c("KvT"),y=Term,size=KvT_sig,color=KvT_FDR)) +
geom_point(aes(x=c("KvC"),y=Term,size=KvC_sig,color=KvC_FDR)) +
scale_color_continuous(low="red",high="blue",na.value="grey50") +
theme_bw() +
ylab("") +
xlab("Sample Comparisons") +
labs(size="Gene Count",color="FDR")
}
#Function for running topGO on a list of genes
topGO <- function(genelist,goTerms,nodeSize,filename,writeData=FALSE){
require(topGO)
require(GO.db)
path <- c("goTerms/")
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",topNodes=length(score(FisherBP)))
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",topNodes=length(score(FisherMF)))
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",topNodes=length(score(FisherCC)))
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable,paste(path,filename,"_BP.csv",sep=""),row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf"),plot=GOdotplot(as.data.frame(BPgenTable)))
write.csv(MFgenTable,paste(path,filename,"_MF.csv",sep=""),row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf"),plot=GOdotplot(MFgenTable))
write.csv(CCgenTable,paste(path,filename,"_CC.csv",sep=""),row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf"),plot=GOdotplot(CCgenTable))
if(writeData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
#Function for making a heat map of genes
geneHeatMap <- function(dds,geneList){
require(pheatmap)
select <- select <- row.names(counts(dds,normalized=TRUE)) %in% genelist
nt <- normTransform(dds) # defaults to log2(x+1)
log2.norm.counts <- assay(nt)[select,]
COL <- as.data.frame(colData(dds)[,c("condition")])
pheatmap(log2.norm.counts, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=FALSE, annotation_col=df)
}
#DESeq2
#Run initial DESeq2 analysis
#Load Deseq2
library(DESeq2)
#Read in sample metadata
sampleTable <- read.csv("../misc/sample_metadata.csv",header=T)
#Read in Counts Table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter
dds <- dds[rowSums(counts(dds)) > 1,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate Size Factors
dds <- estimateSizeFactors(dds)
#Estimate Dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald Test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
pdf("sampleHeatMap.pdf",width=6,height=6,paper='special')
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
pdf("samplePCA.pdf",width=6,height=6,paper='special')
pcaPlot(rld)
dev.off()
#Make results tables for each pairwise comparison
resKvT <- makeResultsTable(dds,"kale","TO1000",filter=FALSE)
resKvC <- makeResultsTable(dds,"kale","cabbage",filter=FALSE)
resCvT <- makeResultsTable(dds,"cabbage","TO1000",filter=FALSE)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
resfull$padj <- p.adjust(resfull$pval,method="BH")
#Extract and output a table of normalized counts
normalizedCounts <- counts(dds, normalized=TRUE)
all_genes <- data.frame(gene=row.names(normalizedCounts), normalizedCounts[,c(3,4,5,1,2,6,7,8)],
as.data.frame(sapply(levels(dds$condition),
function(lvl) rowMeans(counts(dds,normalized=TRUE)[,dds$condition == lvl]))),
resfull[resfull$sampleA=="kale" & resfull$sampleB=="TO1000",c(6,8)],
resfull[resfull$sampleA=="kale" & resfull$sampleB=="cabbage",c(6,8)],
resfull[resfull$sampleA=="cabbage" & resfull$sampleB=="TO1000",c(6,8)])
colnames(all_genes) <- c("gene","kale1", "kale2", "kale3", "cabbage1", "cabbage2",
"TO10001", "TO10002", "TO10003", "kale_mean",
"cabbage_mean", "TO1000_mean", "KvT_log2FC", "KvT_padj",
"KvC_log2FC", "KvC_padj", "CvT_log2FC", "CvT_padj" )
write.table(all_genes, "Gene_expression_table.tsv",sep="\t",
quote=FALSE, row.names=FALSE)
#Extract significant DEGs
sig <- na.omit(resfull[resfull$padj <= 0.05 & resfull$log2FC >= 1 | resfull$padj <= 0.05 & resfull$log2FC <= -1,])
#Count number of DEGs for each comparison
table(sig$sampleA,sig$sampleB)
#For each pairwise comparison, extract the DEGs
CvTsig <- sig[sig$sampleA == "cabbage" & sig$sampleB == "TO1000",]
KvTsig <- sig[sig$sampleA == "kale" & sig$sampleB == "TO1000",]
KvCsig <- sig[sig$sampleA == "kale" & sig$sampleB == "cabbage",]
#Venn Diagram of DEGs
#Make a table of overlap between pairwise comparisons
d2 <- data.frame(id=unique(sig$id))
d2 <- data.frame(id=d2$id,KvT=ifelse(d2$id %in% sig[sig$sampleA == "kale" & sig$sampleB == "TO1000",]$id, 1, 0),
KvC=ifelse(d2$id %in% sig[sig$sampleA == "kale" & sig$sampleB == "cabbage",]$id, 1, 0),
CvT=ifelse(d2$id %in% sig[sig$sampleA == "cabbage" & sig$sampleB == "TO1000",]$id, 1, 0)
)
#Make Venn Diagram
library(VennDiagram)
pdf("comparisonVennDiagram.pdf",width=6,height=6,paper='special')
draw.triple.venn(area1=nrow(subset(d2,CvT==1)),
area2=nrow(subset(d2,KvT==1)),
area3=nrow(subset(d2,KvC==1)),
n12=nrow(subset(d2,CvT==1 & KvT==1)),
n23=nrow(subset(d2,KvT==1 & KvC==1)),
n13=nrow(subset(d2,CvT==1 & KvC==1)),
n123=nrow(subset(d2,CvT==1 & KvT==1 & KvC==1)),
category = c("Cabbage v TO1000", "Kale v TO100", "Kale v Cabbage"),
lty = "blank",
fill = c("skyblue", "pink1", "mediumorchid")
)
dev.off()
##GO term enrichment
library(topGO)
library(GO.db)
goTerms <- readMappings(file="../misc/topGO.txt")
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,"CvT_up",writeData=TRUE)
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,"CvT_down",writeData=TRUE)
KvTgotermUP <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC > 1,]$id))
names(KvTgotermUP) <- resKvT$id
KvTgotermUP <- topGO(KvTgotermUP,goTerms,nodeSize=5,"KvT_up",writeData=TRUE)
KvTgotermDOWN <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC < -1,]$id))
names(KvTgotermDOWN) <- resKvT$id
KvTgotermDOWN <- topGO(KvTgotermDOWN,goTerms,nodeSize=5,"KvT_down",writeData=TRUE)
KvCgotermUP <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC > 1,]$id))
names(KvCgotermUP) <- resKvC$id
KvCgotermUP <- topGO(KvCgotermUP,goTerms,nodeSize=5,"KvC_up",writeData=TRUE)
KvCgotermDOWN <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC < -1,]$id))
names(KvCgotermDOWN) <- resKvC$id
KvCgotermDOWN <- topGO(KvCgotermDOWN,goTerms,nodeSize=5,"KvC_down",writeData=TRUE)
upGoterm <- merge(CvTgotermUP$BP,KvTgotermUP$BP,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$BP,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
ggsave("goTerms/Up_BP.pdf",plot=GOdotplot2(upSig))
upGoterm <- merge(CvTgotermUP$MF,KvTgotermUP$MF,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$MF,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
ggsave("goTerms/Up_MF.pdf",plot=GOdotplot2(upSig))
upGoterm <- merge(CvTgotermUP$CC,KvTgotermUP$CC,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$CC,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
ggsave("goTerms/Up_CC.pdf",plot=GOdotplot2(upSig))
downGoterm <- merge(CvTgotermDOWN$BP,KvTgotermDOWN$BP,by.x="GO.ID",by.y="GO.ID")
downGoterm <- merge(downGoterm,KvCgotermDOWN$BP,by.x="GO.ID",by.y="GO.ID")
downSig <- downGoterm[downGoterm$fdr.x < 0.05 | downGoterm$fdr.y < 0.05 | downGoterm$fdr < 0.05, ]
downSig <- data.frame(Term = downSig$Term, CvT_FDR = downSig$fdr.x, CvT_sig = downSig$Significant.x, KvT_FDR = downSig$fdr.y, KvT_sig = downSig$Significant.y, KvC_FDR = downSig$fdr, KvC_sig = downSig$Significant)
downSig$CvT_FDR <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_FDR, NA)
downSig$CvT_sig <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_sig, NA)
downSig$KvT_FDR <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_FDR, NA)
downSig$KvT_sig <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_sig, NA)
downSig$KvC_FDR <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_FDR, NA)
downSig$KvC_sig <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_sig, NA)
ggsave("goTerms/Down_BP.pdf",plot=GOdotplot2(downSig))
downGoterm <- merge(CvTgotermDOWN$MF,KvTgotermDOWN$MF,by.x="GO.ID",by.y="GO.ID")
downGoterm <- merge(downGoterm,KvCgotermDOWN$MF,by.x="GO.ID",by.y="GO.ID")
downSig <- downGoterm[downGoterm$fdr.x < 0.05 | downGoterm$fdr.y < 0.05 | downGoterm$fdr < 0.05, ]
downSig <- data.frame(Term = downSig$Term, CvT_FDR = downSig$fdr.x, CvT_sig = downSig$Significant.x, KvT_FDR = downSig$fdr.y, KvT_sig = downSig$Significant.y, KvC_FDR = downSig$fdr, KvC_sig = downSig$Significant)
downSig$CvT_FDR <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_FDR, NA)
downSig$CvT_sig <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_sig, NA)
downSig$KvT_FDR <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_FDR, NA)
downSig$KvT_sig <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_sig, NA)
downSig$KvC_FDR <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_FDR, NA)
downSig$KvC_sig <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_sig, NA)
ggsave("goTerms/Down_MF.pdf",plot=GOdotplot2(downSig))
downGoterm <- merge(CvTgotermDOWN$CC,KvTgotermDOWN$CC,by.x="GO.ID",by.y="GO.ID")
downGoterm <- merge(downGoterm,KvCgotermDOWN$CC,by.x="GO.ID",by.y="GO.ID")
downSig <- downGoterm[downGoterm$fdr.x < 0.05 | downGoterm$fdr.y < 0.05 | downGoterm$fdr < 0.05, ]
downSig <- data.frame(Term = downSig$Term, CvT_FDR = downSig$fdr.x, CvT_sig = downSig$Significant.x, KvT_FDR = downSig$fdr.y, KvT_sig = downSig$Significant.y, KvC_FDR = downSig$fdr, KvC_sig = downSig$Significant)
downSig$CvT_FDR <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_FDR, NA)
downSig$CvT_sig <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_sig, NA)
downSig$KvT_FDR <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_FDR, NA)
downSig$KvT_sig <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_sig, NA)
downSig$KvC_FDR <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_FDR, NA)
downSig$KvC_sig <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_sig, NA)
ggsave("goTerms/Down_CC.pdf",plot=GOdotplot2(downSig))
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,"CvT_up",writeData=TRUE)
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,"CvT_down",writeData=TRUE)
KvTgotermUP <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC > 1,]$id))
names(KvTgotermUP) <- resKvT$id
KvTgotermUP <- topGO(KvTgotermUP,goTerms,nodeSize=5,"KvT_up",writeData=TRUE)
KvTgotermDOWN <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC < -1,]$id))
names(KvTgotermDOWN) <- resKvT$id
KvTgotermDOWN <- topGO(KvTgotermDOWN,goTerms,nodeSize=5,"KvT_down",writeData=TRUE)
KvCgotermUP <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC > 1,]$id))
names(KvCgotermUP) <- resKvC$id
KvCgotermUP <- topGO(KvCgotermUP,goTerms,nodeSize=5,"KvC_up",writeData=TRUE)
KvCgotermDOWN <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC < -1,]$id))
names(KvCgotermDOWN) <- resKvC$id
KvCgotermDOWN <- topGO(KvCgotermDOWN,goTerms,nodeSize=5,"KvC_down",writeData=TRUE)
upGoterm <- merge(CvTgotermUP$BP,KvTgotermUP$BP,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$BP,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
ggsave("goTerms/Up_BP.pdf",plot=GOdotplot2(upSig))
upGoterm <- merge(CvTgotermUP$MF,KvTgotermUP$MF,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$MF,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
goTerms <- readMappings(file="../misc/topGO.txt")
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,"CvT_up",writeData=TRUE)
head(topGO())
head(goTerms)
tail(goTerms)
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,"CvT_down",writeData=TRUE)
KvTgotermUP <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC > 1,]$id))
names(KvTgotermUP) <- resKvT$id
KvTgotermUP <- topGO(KvTgotermUP,goTerms,nodeSize=5,"KvT_up",writeData=TRUE)
KvTgotermDOWN <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC < -1,]$id))
names(KvTgotermDOWN) <- resKvT$id
KvTgotermDOWN <- topGO(KvTgotermDOWN,goTerms,nodeSize=5,"KvT_down",writeData=TRUE)
KvCgotermUP <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC > 1,]$id))
names(KvCgotermUP) <- resKvC$id
KvCgotermUP <- topGO(KvCgotermUP,goTerms,nodeSize=5,"KvC_up",writeData=TRUE)
KvCgotermDOWN <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC < -1,]$id))
names(KvCgotermDOWN) <- resKvC$id
KvCgotermDOWN <- topGO(KvCgotermDOWN,goTerms,nodeSize=5,"KvC_down",writeData=TRUE)
resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id
table(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id)
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
GOTERM
#DESeq2
#Run initial DESeq2 analysis
#Load Deseq2
library(DESeq2)
#Read in sample metadata
sampleTable <- read.csv("../misc/sample_metadata.csv",header=T)
#Read in Counts Table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter
dds <- dds[rowSums(counts(dds)) > 10,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate Size Factors
dds <- estimateSizeFactors(dds)
#Estimate Dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald Test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
pdf("sampleHeatMap.pdf",width=6,height=6,paper='special')
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
pdf("samplePCA.pdf",width=6,height=6,paper='special')
pcaPlot(rld)
dev.off()
#Make results tables for each pairwise comparison
resKvT <- makeResultsTable(dds,"kale","TO1000",filter=FALSE)
resKvC <- makeResultsTable(dds,"kale","cabbage",filter=FALSE)
resCvT <- makeResultsTable(dds,"cabbage","TO1000",filter=FALSE)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
resfull$padj <- p.adjust(resfull$pval,method="BH")
#Extract and output a table of normalized counts
normalizedCounts <- counts(dds, normalized=TRUE)
all_genes <- data.frame(gene=row.names(normalizedCounts), normalizedCounts[,c(3,4,5,1,2,6,7,8)],
as.data.frame(sapply(levels(dds$condition),
function(lvl) rowMeans(counts(dds,normalized=TRUE)[,dds$condition == lvl]))),
resfull[resfull$sampleA=="kale" & resfull$sampleB=="TO1000",c(6,8)],
resfull[resfull$sampleA=="kale" & resfull$sampleB=="cabbage",c(6,8)],
resfull[resfull$sampleA=="cabbage" & resfull$sampleB=="TO1000",c(6,8)])
colnames(all_genes) <- c("gene","kale1", "kale2", "kale3", "cabbage1", "cabbage2",
"TO10001", "TO10002", "TO10003", "kale_mean",
"cabbage_mean", "TO1000_mean", "KvT_log2FC", "KvT_padj",
"KvC_log2FC", "KvC_padj", "CvT_log2FC", "CvT_padj" )
write.table(all_genes, "Gene_expression_table.tsv",sep="\t",
quote=FALSE, row.names=FALSE)
#Extract significant DEGs
sig <- na.omit(resfull[resfull$padj <= 0.05 & resfull$log2FC >= 1 | resfull$padj <= 0.05 & resfull$log2FC <= -1,])
#Count number of DEGs for each comparison
table(sig$sampleA,sig$sampleB)
#For each pairwise comparison, extract the DEGs
CvTsig <- sig[sig$sampleA == "cabbage" & sig$sampleB == "TO1000",]
KvTsig <- sig[sig$sampleA == "kale" & sig$sampleB == "TO1000",]
KvCsig <- sig[sig$sampleA == "kale" & sig$sampleB == "cabbage",]
#Venn Diagram of DEGs
#Make a table of overlap between pairwise comparisons
d2 <- data.frame(id=unique(sig$id))
d2 <- data.frame(id=d2$id,KvT=ifelse(d2$id %in% sig[sig$sampleA == "kale" & sig$sampleB == "TO1000",]$id, 1, 0),
KvC=ifelse(d2$id %in% sig[sig$sampleA == "kale" & sig$sampleB == "cabbage",]$id, 1, 0),
CvT=ifelse(d2$id %in% sig[sig$sampleA == "cabbage" & sig$sampleB == "TO1000",]$id, 1, 0)
)
#Make Venn Diagram
library(VennDiagram)
pdf("comparisonVennDiagram.pdf",width=6,height=6,paper='special')
draw.triple.venn(area1=nrow(subset(d2,CvT==1)),
area2=nrow(subset(d2,KvT==1)),
area3=nrow(subset(d2,KvC==1)),
n12=nrow(subset(d2,CvT==1 & KvT==1)),
n23=nrow(subset(d2,KvT==1 & KvC==1)),
n13=nrow(subset(d2,CvT==1 & KvC==1)),
n123=nrow(subset(d2,CvT==1 & KvT==1 & KvC==1)),
category = c("Cabbage v TO1000", "Kale v TO100", "Kale v Cabbage"),
lty = "blank",
fill = c("skyblue", "pink1", "mediumorchid")
)
dev.off()
##GO term enrichment
library(topGO)
library(GO.db)
goTerms <- readMappings(file="../misc/topGO.txt")
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,"CvT_up",writeData=TRUE)
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,"CvT_down",writeData=TRUE)
#Read in sample metadata
sampleTable <- read.csv("../misc/sample_metadata.csv",header=T)
#Read in Counts Table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter
dds <- dds[rowSums(counts(dds)) > 1,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate Size Factors
dds <- estimateSizeFactors(dds)
#Estimate Dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald Test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
pdf("sampleHeatMap.pdf",width=6,height=6,paper='special')
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
pdf("samplePCA.pdf",width=6,height=6,paper='special')
pcaPlot(rld)
dev.off()
#Make results tables for each pairwise comparison
resKvT <- makeResultsTable(dds,"kale","TO1000",filter=FALSE)
resKvC <- makeResultsTable(dds,"kale","cabbage",filter=FALSE)
resCvT <- makeResultsTable(dds,"cabbage","TO1000",filter=FALSE)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
resfull$padj <- p.adjust(resfull$pval,method="BH")
#Extract and output a table of normalized counts
normalizedCounts <- counts(dds, normalized=TRUE)
all_genes <- data.frame(gene=row.names(normalizedCounts), normalizedCounts[,c(3,4,5,1,2,6,7,8)],
as.data.frame(sapply(levels(dds$condition),
function(lvl) rowMeans(counts(dds,normalized=TRUE)[,dds$condition == lvl]))),
resfull[resfull$sampleA=="kale" & resfull$sampleB=="TO1000",c(6,8)],
resfull[resfull$sampleA=="kale" & resfull$sampleB=="cabbage",c(6,8)],
resfull[resfull$sampleA=="cabbage" & resfull$sampleB=="TO1000",c(6,8)])
colnames(all_genes) <- c("gene","kale1", "kale2", "kale3", "cabbage1", "cabbage2",
"TO10001", "TO10002", "TO10003", "kale_mean",
"cabbage_mean", "TO1000_mean", "KvT_log2FC", "KvT_padj",
"KvC_log2FC", "KvC_padj", "CvT_log2FC", "CvT_padj" )
write.table(all_genes, "Gene_expression_table.tsv",sep="\t",
quote=FALSE, row.names=FALSE)
1.5e+8
1.5^8
1.5^e+8
1.5e-8
1.5e+8
data.frame(Region=("Genic","2000bp Upstream","2000bp Downstream","Distal >2kb", "Distal >10kb"),Number=(14122,19402,12717,8650,14386))
data.frame(Region=c("Genic","2000bp Upstream","2000bp Downstream","Distal >2kb", "Distal >10kb"),Number=c(14122,19402,12717,8650,14386))
df1<-data.frame(Region=c("Genic","2000bp Upstream","2000bp Downstream","Distal >2kb", "Distal >10kb"),Number=c(14122,19402,12717,8650,14386))
sum(df1$Number)
df1<-data.frame(Region=c("Genic","2000bp Upstream","2000bp Downstream","Distal >2kb", "Distal >10kb"),Number=c(5013,19402,12717,8650,14386))
sum(df1$Number)
df1$Percentage<-df1$Number/60168
df1
library(ggplot2)
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region))
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region),stat="identity")
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region),stat="identity")+geom_bw()
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region),stat="identity")+theme_bw()
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region,color=Region),stat="identity")+theme_bw()
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region,fill=Region),stat="identity")+theme_bw()
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region,fill=Region),stat="identity")+theme_bw()+scaly_y_continuous(labels=percent)
library(scales)
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region,fill=Region),stat="identity")+theme_bw()+scaly_y_continuous(labels=percent)
ggplot(df1)+geom_bar(aes(y=Percentage,x=Region,fill=Region),stat="identity")+theme_bw()+scale_y_continuous(labels=percent)
df1$order<-c(1,2,3,4,5)
ggplot(df1)+geom_bar(aes(y=Percentage,x=reorder(Region,order),fill=Region),stat="identity")+theme_bw()+scale_y_continuous(labels=percent)
ggplot(df1)+geom_bar(aes(y=Percentage,x=reorder(Region,order),fill=Region),stat="identity")+theme_bw()+scale_y_continuous(labels=percent)+xlab("")
ggplot(df1)+geom_bar(aes(y=Percentage,x=reorder(Region,order),fill=Region),stat="identity")+theme_bw(axis.text.x=element_text(angle=90))+scale_y_continuous(labels=percent)+xlab("")
ggplot(df1)+geom_bar(aes(y=Percentage,x=reorder(Region,order),fill=Region),stat="identity")+theme_bw()+thee(axis.text.x=element_text(angle=90))+scale_y_continuous(labels=percent)+xlab("")
ggplot(df1)+geom_bar(aes(y=Percentage,x=reorder(Region,order),fill=Region),stat="identity")+theme_bw()+theme(axis.text.x=element_text(angle=90))+scale_y_continuous(labels=percent)+xlab("")
ggplot(df1)+geom_bar(aes(y=Percentage,x=reorder(Region,order),fill=Region),stat="identity")+theme_bw()+theme(axis.text.x=element_text(angle=90,hjust=1))+scale_y_continuous(labels=percent)+xlab("")
ggplot(df1)+geom_bar(aes(y=Percentage,x=reorder(Region,order),fill=Region),stat="identity")+theme_bw()+scale_y_continuous(labels=percent)+xlab("")
df1
0.08331671+0.08331671+0.08331671
0.08331671+0.32246377+0.32246377
0.08331671+0.32246377+0.21135820
setwd("Analysis/Boleracea-rnaseq/figures_tables/")
source("../scripts/deg.R")
Kshared <- subset(d2,KvT==1 & KvC==1)
Kshared
head(Kshared)
nrow(KvTsig)
Kshared <- subset(d2,KvT==1 & KvC==1 & CvT==0)
Kshared <- subset(d2,KvT==1 & KvC==1 & CvT==0)$id
Kshared
head(geneEx[geneEx$Gene %in% Kshared,])
Kshared2 <- geneEx[geneEx$Gene %in% Kshared,]
nrow(Kshared2[Kshared2$KvT_log2FC])
nrow(Kshared2)
nrow(Kshared2[Kshared2$KvT_log2FC > 1 & Kshared2$KvC_log2FC > 1,])
nrow(Kshared2[Kshared2$KvT_log2FC > 1 & Kshared2$KvC_log2FC < `1,])
nrow(Kshared2[Kshared2$KvT_log2FC > 1 & Kshared2$KvC_log2FC > -1,])
nrow(Kshared2[Kshared2$KvT_log2FC > 1 & Kshared2$KvC_log2FC > -1,])
nrow(Kshared2[Kshared2$KvT_log2FC > 1 & Kshared2$KvC_log2FC < -1,])
KsharedUp <- Kshared2[Kshared2$KvT_log2FC > 1 & Kshared2$KvC_log2FC > 1,]
KsharedDown <- Kshared2[Kshared2$KvT_log2FC < -1 & Kshared2$KvC_log2FC < -1,]
KsharedGOtermUP <- topGO(KsharedUp,goTerms,nodeSize=5,"Kshared_up",writeData=TRUE)
KsharedGOtermDown <- topGO(KsharedDown,goTerms,nodeSize=5,"Kshared_down",writeData=TRUE)
KsharedGOtermUP  <- factor(as.integer(resKvT$id %in% Kshared))
names(KsharedGOtermUP ) <- resKvT$id
KsharedGOtermUP <- topGO(KsharedGOtermUP,goTerms,nodeSize=5,"Kshared_up",writeData=TRUE)
head(KsharedDown)
KsharedGOtermUP  <- factor(as.integer(resKvT$id %in% KsharedDown$Gene))
names(KsharedGOtermUP ) <- resKvT$id
KsharedGOtermUP <- topGO(KsharedGOtermUP,goTerms,nodeSize=5,"Kshared_up",writeData=TRUE)
KsharedGOtermDown  <- factor(as.integer(resKvT$id %in% KsharedUp$Gene))
names(KsharedGOtermDown ) <- resKvT$id
KsharedGOtermDown <- topGO(KsharedGOtermDown,goTerms,nodeSize=5,"Kshared_down",writeData=TRUE)
KsharedGOtermDown
head(goTerms)
KsharedGOtermUP  <- factor(as.integer(resKvT$id %in% KsharedUp$Gene))
names(KsharedGOtermUP ) <- resKvT$id
KsharedGOtermUP <- topGO(KsharedGOtermUP,goTerms,nodeSize=3,"Kshared_up",writeData=TRUE)
KsharedGOtermDown  <- factor(as.integer(resKvT$id %in% KsharedDown$Gene))
names(KsharedGOtermDown ) <- resKvT$id
KsharedGOtermDown <- topGO(KsharedGOtermDown,goTerms,nodeSize=3,"Kshared_down",writeData=TRUE)
leaf <- read.table("tmp",header=F,sep="\t")
head(leaf)
Kshared %in% leaf$V1
table(Kshared %in% leaf$V1)
Kshared2[Kshared2 %in% leaf$V1,]
Kshared2[Kshared2$Gene %in% leaf$V1,]
Kshared2[Kshared2$Gene %in% leaf,]
leaf<- c("Bo4g151860","Bo8g100290","Bo1g005330")
Kshared2[Kshared2$Gene %in% leaf,]
Kshared2[Kshared2$Gene == "Bo4g151860",]
geneEx[geneEx$Gene == "Bo4g151860",]
geneEx[geneEx$Gene %in% leaf,]
